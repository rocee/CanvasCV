Linux installation {#installlinux}
==================

### Build dependencies
Make sure these are installed first and that their executables are **in your path**:
* **cmake** - should already be installed since you built OpenCV by yourself.
* **git** (optional) - you can also download the sources from GitHub.

### Prepare to build

    git clone https://github.com/sagi-z/CanvasCV.git
    cd CanvasCV
    git checkout tags/@CPACK_PACKAGE_VERSION@
    mkdir build
    cd build


### By default cmake is building without the C++ examples

    cmake ..
    make


### Here is how to build the examples

    cmake -DBUILD_EXAMPLES=ON ..
    make


### Install option 1 for Linux (from the build directory):

    sudo make install


### C++ Install option 2 for Linux - cleaner (from the build directory):

    cpack -G DEB
    sudo dpkg -i ./canvascv-@CPACK_PACKAGE_VERSION@-Linux.deb


### C++ Usage
Assuming installation in '/usr/local', add to cflags '-I/usr/local/include' and to link flags '-L/usr/local/lib -lcanvascv'

Here is a *CMakeLists.txt* example, from what used for the tutorials:

```
cmake_minimum_required(VERSION 2.8)

project (canvascv-tutorials)

find_package(OpenCV 3.1.0 REQUIRED)

if(NOT WIN32)
    set(CXX_11_FS_LIB "-lstdc++fs")
else()
    set(CXX_11_FS_LIB "")
endif()
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 11)

# add include directories to the project
include_directories(
    ${PROJECT_SOURCE_DIR}/tutorials
    ${OpenCV_INCLUDE_DIRS}
    /usr/local/include
)

file(GLOB_RECURSE TUTORIAL_SRCS
    "tutorials/*.h"
    "tutorials/*.cpp"
)

find_library(CanvasCV_LIB canvascv "/usr/local/lib")

message ("Building these tutorials:")
foreach ( file ${TUTORIAL_SRCS} )
    get_filename_component( target_name ${file} NAME_WE )
    message ( "Example '${target_name}' will be created")
    add_executable(${target_name} ${file})
    target_link_libraries (${target_name} ${CanvasCV_LIB} ${CXX_11_FS_LIB} ${OpenCV_LIBS})
endforeach()
```
